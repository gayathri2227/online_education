package com.student;
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import com.student.dao.CourseDao;
import com.student.dto.CourseDto;
import com.student.entity.Student;
import com.student.exception.ResourceNotFoundException;
import com.student.repository.StudentRepository;
import com.student.service.StudentServiceImp;

public class StudentServiceTest {

    @Mock
    private StudentRepository studentRepository;

    @Mock
    private CourseDao dao;

    @InjectMocks
    private StudentServiceImp studentService;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testSaveDetails() {
        Student student = new Student();
        when(studentRepository.save(student)).thenReturn(student);

        Student savedStudent = studentService.saveDetails(student);
        assertNotNull(savedStudent);
        // Add more assertions as needed
    }

    @Test
    public void testSearchById() {
        long id = 1;
        Student student = new Student();
        Optional<Student> optionalStudent = Optional.of(student);
        when(studentRepository.findByStudentId(id)).thenReturn(optionalStudent);

        Student foundStudent = studentService.searchById(id);
        assertNotNull(foundStudent);
        // Add more assertions as needed
    }

    

 

        @Test
        public void testDelete() {
            long id = 1;
            Student student = new Student();
            when(studentRepository.findByStudentId(id)).thenReturn(java.util.Optional.of(student));

            String resultMessage = studentService.delete(id);
            assertEquals("Student deleted successfully", resultMessage);
            verify(studentRepository, times(1)).delete(student);
        }

        


        @Test
        public void testGetAll() {
            List<Student> students = new ArrayList<>();
            when(studentRepository.findAll()).thenReturn(students);

            List<Student> allStudents = studentService.getAll();
            assertNotNull(allStudents);
            // Add more assertions as needed
        }

        

       
        @Test
        public void testRegisterForCourseCourseNotFound() {
            long studentId = 1;
            long courseId = 1;
            when(studentRepository.findByStudentId(studentId)).thenReturn(java.util.Optional.of(new Student()));
            when(dao.searchByCourseId(courseId)).thenReturn(null);

            assertThrows(ResourceNotFoundException.class, () -> {
                studentService.registerForCourse(studentId, courseId);
            });
        }

        @Test
        public void testRegisterForCourseCourseFull() {
            long studentId = 1;
            long courseId = 1;
            CourseDto course = new CourseDto();
            course.setMaxStudent(0);
            when(dao.searchByCourseId(courseId)).thenReturn(course);
            when(studentRepository.findByStudentId(studentId)).thenReturn(java.util.Optional.of(new Student()));

            assertThrows(IllegalStateException.class, () -> {
                studentService.registerForCourse(studentId, courseId);
            });
        }

        @Test
        public void testGetScore() {
            long id = 1;
            Student student = new Student();
            student.setScore(90);
            when(studentRepository.findByStudentId(id)).thenReturn(java.util.Optional.of(student));

            int resultScore = studentService.getScore(id);
            assertEquals(90, resultScore);
        }

        @Test
        public void testGetAllPass() {
            List<Student> students = new ArrayList<>();
            Student passedStudent = new Student();
            passedStudent.setScore(1);
            students.add(passedStudent);
            when(studentRepository.findAll()).thenReturn(students);

            List<Student> passedStudents = studentService.getAllPass();
            assertFalse(passedStudents.isEmpty());
            // Add more assertions as needed
        }

        @Test
        public void testGetAllFail() {
            List<Student> students = new ArrayList<>();
            Student failedStudent = new Student();
            failedStudent.setScore(0);
            students.add(failedStudent);
            when(studentRepository.findAll()).thenReturn(students);

            List<Student> failedStudents = studentService.getAllFail();
            assertFalse(failedStudents.isEmpty());
            // Add more assertions as needed
        }
    

}
